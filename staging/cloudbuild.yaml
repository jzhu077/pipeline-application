secrets:
- kmsKeyName: 'projects/hightowerlabs/locations/global/keyRings/pipeline/cryptoKeys/github'
  secretEnv:
    GITHUB_TOKEN: 'CiQAuSIxIT74dPqyvNoVJbIMu8B6QGCw24LHtgTpBZqlG7dA3ywSUgDFjqKD8CJ7V0rlw9V6Tz+YTHazHsfJOieuHkLkipslR7G7p2ZbLl8+UJdc7EQL2BcYd6qgbFEl7L4+C6k4qds6VxuEEwPw9Ledhh5YtyVNTtc='

steps:
- name: 'gcr.io/cloud-builders/docker'
  args:
    - 'build'
    - '-t'
    - 'gcr.io/${PROJECT_ID}/pipeline-application:${COMMIT_SHA}'
    - '.'
- name: 'gcr.io/cloud-builders/docker'
  args:
    - 'push'
    - 'gcr.io/${PROJECT_ID}/pipeline-application:${COMMIT_SHA}'

# Generate a kubeconfig file for the cluster identified by
# ${_CLOUDSDK_CONTAINER_CLUSTER} in the zone identified by
# ${_CLOUDSDK_COMPUTE_ZONE}.
#
# The generated kubeconfig file is written to /kube/config. Subsequent
# steps can use the kubeconfig by setting the following:
#
#  env:
#    - 'KUBECONFIG=/kube/config'
#
#  volumes:
#    - name: 'kube'
#      path: /kube
#
- name: 'gcr.io/cloud-builders/gcloud'
  env:
    - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
    - 'KUBECONFIG=/kube/config'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      CLUSTER=$$(gcloud config get-value container/cluster)
      PROJECT=$$(gcloud config get-value core/project)
      ZONE=$$(gcloud config get-value compute/zone)
      
      cat <<EOF
      Running: gcloud container clusters get-credentials "$${CLUSTER}" --project "$${PROJECT}" --zone "$${ZONE}"
      EOF

      gcloud container clusters get-credentials "$${CLUSTER}" \
        --project "$${PROJECT}" \
        --zone "$${ZONE}"
  volumes:
    - name: 'kube'
      path: /kube

# Ensure a namespace exists for each branch.
- name: 'gcr.io/cloud-builders/gcloud'
  env:
    - 'KUBECONFIG=/kube/config'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      cat <<EOF | kubectl apply --namespace ${BRANCH_NAME} -f -
      kind: Namespace
      apiVersion: v1
      metadata:
        name: ${BRANCH_NAME}
      EOF
  volumes:
    - name: 'kube'
      path: /kube

# Clone the pipeline-infrastructure repo which holds the Kubernetes
# deployment manifests.
- name: 'gcr.io/cloud-builders/git'
  secretEnv: ['GITHUB_TOKEN']
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      git clone https://$$GITHUB_TOKEN@github.com:kelseyhightower/pipeline-infrastructure.git /pipeline-infrastructure
  volumes:
    - name: 'pipeline-infrastructure'
      path: /pipeline-infrastructure

# Update the Kubernetes deployment config.
- name: 'gcr.io/cloud-builders/gcloud'
  env:
    - 'KUBECONFIG=/kube/config'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      cat <<EOF > patch.yaml
      spec:
        template:
          spec:
            containers:
              - name: pipeline-application
                image: gcr.io/${PROJECT_ID}/pipeline-application:${COMMIT_SHA}
      EOF

      kubectl patch --local -o yaml \
        -f /pipeline-infrastructure/staging/app.yaml \
        -p "$(cat patch.yaml)" \
        > app.yaml

      sed -i '/namespace/d' app.yaml

      kubectl apply --namespace ${BRANCH_NAME} -f app.yaml

      mv app.yaml /pipeline-infrastructure/staging/app.yaml
  volumes:
    - name: 'kube'
      path: /kube
    - name: 'pipeline-infrastructure'
      path: /pipeline-infrastructure

- name: 'gcr.io/cloud-builders/git'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      cd /pipeline-infrastructure/
      git config --global user.email "330612842442@cloudbuild.gserviceaccount.com"
      git config --global user.name "Google Container Builder"
      git add staging/app.yaml

      git commit -F- <<EOF
      Update the pipeline-application in staging

      This commit updates the pipeline-application deployment 
      pipeline-application container image to:

          gcr.io/${PROJECT_ID}/pipeline-application:${COMMIT_SHA}.

      Build ID: ${BUILD_ID}
      EOF

      git push origin master
  volumes:
    - name: 'pipeline-infrastructure'
      path: /pipeline-infrastructure
